// This client was generated by Platformatic from an OpenAPI specification.

import type { Api } from './api-types'

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
export const setBaseUrl = (newUrl: string) : void => { baseUrl = newUrl }

export const getUsers: Api['getUsers'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const createUser: Api['createUser'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/`, {
    method:'post',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const updateUsers: Api['updateUsers'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const getUserById: Api['getUserById'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const updateUser: Api['updateUser'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}`, {
    method:'put',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const deleteUsers: Api['deleteUsers'] = async (request) => {
  const response = await fetch(`${baseUrl}/users/${request.id}`, {
    method:'delete',
    body: JSON.stringify(request),
    headers: {
      'Content-Type': 'application/json'
    }
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const getLoginGithub: Api['getLoginGithub'] = async (request) => {
  const response = await fetch(`${baseUrl}/login/github?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const getLoginGithubCallback: Api['getLoginGithubCallback'] = async (request) => {
  const response = await fetch(`${baseUrl}/login/github/callback?${new URLSearchParams(Object.entries(request || {})).toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

